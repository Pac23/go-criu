// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netdev.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NdType int32

const (
	NdType_LOOPBACK NdType = 1
	NdType_VETH     NdType = 2
	NdType_TUN      NdType = 3
	//
	// External link -- for those CRIU only dumps and restores
	// link parameters such as flags, address, MTU, etc. The
	// existence of the link on restore should be provided
	// by the setup-namespaces script.
	NdType_EXTLINK NdType = 4
	NdType_VENET   NdType = 5
	NdType_BRIDGE  NdType = 6
	NdType_MACVLAN NdType = 7
	NdType_SIT     NdType = 8
)

var NdType_name = map[int32]string{
	1: "LOOPBACK",
	2: "VETH",
	3: "TUN",
	4: "EXTLINK",
	5: "VENET",
	6: "BRIDGE",
	7: "MACVLAN",
	8: "SIT",
}

var NdType_value = map[string]int32{
	"LOOPBACK": 1,
	"VETH":     2,
	"TUN":      3,
	"EXTLINK":  4,
	"VENET":    5,
	"BRIDGE":   6,
	"MACVLAN":  7,
	"SIT":      8,
}

func (x NdType) Enum() *NdType {
	p := new(NdType)
	*p = x
	return p
}

func (x NdType) String() string {
	return proto.EnumName(NdType_name, int32(x))
}

func (x *NdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NdType_value, data, "NdType")
	if err != nil {
		return err
	}
	*x = NdType(value)
	return nil
}

func (NdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dba1811d1aeaa80b, []int{0}
}

type NetDeviceEntry struct {
	Type                 *NdType           `protobuf:"varint,1,req,name=type,enum=NdType" json:"type,omitempty"`
	Ifindex              *uint32           `protobuf:"varint,2,req,name=ifindex" json:"ifindex,omitempty"`
	Mtu                  *uint32           `protobuf:"varint,3,req,name=mtu" json:"mtu,omitempty"`
	Flags                *uint32           `protobuf:"varint,4,req,name=flags" json:"flags,omitempty"`
	Name                 *string           `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	Tun                  *TunLinkEntry     `protobuf:"bytes,6,opt,name=tun" json:"tun,omitempty"`
	Address              []byte            `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	Conf                 []int32           `protobuf:"varint,8,rep,name=conf" json:"conf,omitempty"`
	Conf4                []*SysctlEntry    `protobuf:"bytes,9,rep,name=conf4" json:"conf4,omitempty"`
	Conf6                []*SysctlEntry    `protobuf:"bytes,10,rep,name=conf6" json:"conf6,omitempty"`
	Macvlan              *MacvlanLinkEntry `protobuf:"bytes,11,opt,name=macvlan" json:"macvlan,omitempty"`
	PeerIfindex          *uint32           `protobuf:"varint,12,opt,name=peer_ifindex,json=peerIfindex" json:"peer_ifindex,omitempty"`
	PeerNsid             *uint32           `protobuf:"varint,13,opt,name=peer_nsid,json=peerNsid" json:"peer_nsid,omitempty"`
	Master               *uint32           `protobuf:"varint,14,opt,name=master" json:"master,omitempty"`
	Sit                  *SitEntry         `protobuf:"bytes,15,opt,name=sit" json:"sit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NetDeviceEntry) Reset()         { *m = NetDeviceEntry{} }
func (m *NetDeviceEntry) String() string { return proto.CompactTextString(m) }
func (*NetDeviceEntry) ProtoMessage()    {}
func (*NetDeviceEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba1811d1aeaa80b, []int{0}
}

func (m *NetDeviceEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetDeviceEntry.Unmarshal(m, b)
}
func (m *NetDeviceEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetDeviceEntry.Marshal(b, m, deterministic)
}
func (m *NetDeviceEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetDeviceEntry.Merge(m, src)
}
func (m *NetDeviceEntry) XXX_Size() int {
	return xxx_messageInfo_NetDeviceEntry.Size(m)
}
func (m *NetDeviceEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_NetDeviceEntry.DiscardUnknown(m)
}

var xxx_messageInfo_NetDeviceEntry proto.InternalMessageInfo

func (m *NetDeviceEntry) GetType() NdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NdType_LOOPBACK
}

func (m *NetDeviceEntry) GetIfindex() uint32 {
	if m != nil && m.Ifindex != nil {
		return *m.Ifindex
	}
	return 0
}

func (m *NetDeviceEntry) GetMtu() uint32 {
	if m != nil && m.Mtu != nil {
		return *m.Mtu
	}
	return 0
}

func (m *NetDeviceEntry) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *NetDeviceEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetDeviceEntry) GetTun() *TunLinkEntry {
	if m != nil {
		return m.Tun
	}
	return nil
}

func (m *NetDeviceEntry) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NetDeviceEntry) GetConf() []int32 {
	if m != nil {
		return m.Conf
	}
	return nil
}

func (m *NetDeviceEntry) GetConf4() []*SysctlEntry {
	if m != nil {
		return m.Conf4
	}
	return nil
}

func (m *NetDeviceEntry) GetConf6() []*SysctlEntry {
	if m != nil {
		return m.Conf6
	}
	return nil
}

func (m *NetDeviceEntry) GetMacvlan() *MacvlanLinkEntry {
	if m != nil {
		return m.Macvlan
	}
	return nil
}

func (m *NetDeviceEntry) GetPeerIfindex() uint32 {
	if m != nil && m.PeerIfindex != nil {
		return *m.PeerIfindex
	}
	return 0
}

func (m *NetDeviceEntry) GetPeerNsid() uint32 {
	if m != nil && m.PeerNsid != nil {
		return *m.PeerNsid
	}
	return 0
}

func (m *NetDeviceEntry) GetMaster() uint32 {
	if m != nil && m.Master != nil {
		return *m.Master
	}
	return 0
}

func (m *NetDeviceEntry) GetSit() *SitEntry {
	if m != nil {
		return m.Sit
	}
	return nil
}

type NetnsId struct {
	// This is CRIU's id which is allocated for each namespace
	TargetNsId *uint32 `protobuf:"varint,1,req,name=target_ns_id,json=targetNsId" json:"target_ns_id,omitempty"`
	//
	// This is an id which can be used to address this namespace
	// from another network namespace. Each network namespace has
	// one set of id-s for other namespaces.
	NetnsidValue         *int32   `protobuf:"varint,2,req,name=netnsid_value,json=netnsidValue" json:"netnsid_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetnsId) Reset()         { *m = NetnsId{} }
func (m *NetnsId) String() string { return proto.CompactTextString(m) }
func (*NetnsId) ProtoMessage()    {}
func (*NetnsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba1811d1aeaa80b, []int{1}
}

func (m *NetnsId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetnsId.Unmarshal(m, b)
}
func (m *NetnsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetnsId.Marshal(b, m, deterministic)
}
func (m *NetnsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetnsId.Merge(m, src)
}
func (m *NetnsId) XXX_Size() int {
	return xxx_messageInfo_NetnsId.Size(m)
}
func (m *NetnsId) XXX_DiscardUnknown() {
	xxx_messageInfo_NetnsId.DiscardUnknown(m)
}

var xxx_messageInfo_NetnsId proto.InternalMessageInfo

func (m *NetnsId) GetTargetNsId() uint32 {
	if m != nil && m.TargetNsId != nil {
		return *m.TargetNsId
	}
	return 0
}

func (m *NetnsId) GetNetnsidValue() int32 {
	if m != nil && m.NetnsidValue != nil {
		return *m.NetnsidValue
	}
	return 0
}

type NetnsEntry struct {
	DefConf              []int32        `protobuf:"varint,1,rep,name=def_conf,json=defConf" json:"def_conf,omitempty"`
	AllConf              []int32        `protobuf:"varint,2,rep,name=all_conf,json=allConf" json:"all_conf,omitempty"`
	DefConf4             []*SysctlEntry `protobuf:"bytes,3,rep,name=def_conf4,json=defConf4" json:"def_conf4,omitempty"`
	AllConf4             []*SysctlEntry `protobuf:"bytes,4,rep,name=all_conf4,json=allConf4" json:"all_conf4,omitempty"`
	DefConf6             []*SysctlEntry `protobuf:"bytes,5,rep,name=def_conf6,json=defConf6" json:"def_conf6,omitempty"`
	AllConf6             []*SysctlEntry `protobuf:"bytes,6,rep,name=all_conf6,json=allConf6" json:"all_conf6,omitempty"`
	Nsids                []*NetnsId     `protobuf:"bytes,7,rep,name=nsids" json:"nsids,omitempty"`
	ExtKey               *string        `protobuf:"bytes,8,opt,name=ext_key,json=extKey" json:"ext_key,omitempty"`
	UnixConf             []*SysctlEntry `protobuf:"bytes,9,rep,name=unix_conf,json=unixConf" json:"unix_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NetnsEntry) Reset()         { *m = NetnsEntry{} }
func (m *NetnsEntry) String() string { return proto.CompactTextString(m) }
func (*NetnsEntry) ProtoMessage()    {}
func (*NetnsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba1811d1aeaa80b, []int{2}
}

func (m *NetnsEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetnsEntry.Unmarshal(m, b)
}
func (m *NetnsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetnsEntry.Marshal(b, m, deterministic)
}
func (m *NetnsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetnsEntry.Merge(m, src)
}
func (m *NetnsEntry) XXX_Size() int {
	return xxx_messageInfo_NetnsEntry.Size(m)
}
func (m *NetnsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_NetnsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_NetnsEntry proto.InternalMessageInfo

func (m *NetnsEntry) GetDefConf() []int32 {
	if m != nil {
		return m.DefConf
	}
	return nil
}

func (m *NetnsEntry) GetAllConf() []int32 {
	if m != nil {
		return m.AllConf
	}
	return nil
}

func (m *NetnsEntry) GetDefConf4() []*SysctlEntry {
	if m != nil {
		return m.DefConf4
	}
	return nil
}

func (m *NetnsEntry) GetAllConf4() []*SysctlEntry {
	if m != nil {
		return m.AllConf4
	}
	return nil
}

func (m *NetnsEntry) GetDefConf6() []*SysctlEntry {
	if m != nil {
		return m.DefConf6
	}
	return nil
}

func (m *NetnsEntry) GetAllConf6() []*SysctlEntry {
	if m != nil {
		return m.AllConf6
	}
	return nil
}

func (m *NetnsEntry) GetNsids() []*NetnsId {
	if m != nil {
		return m.Nsids
	}
	return nil
}

func (m *NetnsEntry) GetExtKey() string {
	if m != nil && m.ExtKey != nil {
		return *m.ExtKey
	}
	return ""
}

func (m *NetnsEntry) GetUnixConf() []*SysctlEntry {
	if m != nil {
		return m.UnixConf
	}
	return nil
}

func init() {
	proto.RegisterEnum("NdType", NdType_name, NdType_value)
	proto.RegisterType((*NetDeviceEntry)(nil), "net_device_entry")
	proto.RegisterType((*NetnsId)(nil), "netns_id")
	proto.RegisterType((*NetnsEntry)(nil), "netns_entry")
}

func init() {
	proto.RegisterFile("netdev.proto", fileDescriptor_dba1811d1aeaa80b)
}

var fileDescriptor_dba1811d1aeaa80b = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x56, 0x9b, 0xa6, 0x49, 0x5e, 0x93, 0x2d, 0x32, 0x12, 0x18, 0x86, 0x44, 0x19, 0x97, 0x69,
	0x12, 0x41, 0x9a, 0xaa, 0x5e, 0xd1, 0x3a, 0x2a, 0xa8, 0x36, 0x3a, 0x30, 0xa5, 0x42, 0x5c, 0xa2,
	0xd0, 0xb8, 0x53, 0xb4, 0xd4, 0xad, 0x62, 0x77, 0x5a, 0x7f, 0x24, 0x17, 0x6e, 0xfc, 0x1b, 0x9e,
	0xed, 0x44, 0xda, 0xa1, 0xec, 0xd4, 0xf7, 0xbe, 0xef, 0xf3, 0x67, 0xf7, 0x7b, 0x2f, 0x10, 0x0a,
	0xae, 0x72, 0x7e, 0x97, 0x6c, 0xaa, 0xb5, 0x5a, 0xbf, 0x88, 0x56, 0xd9, 0xe2, 0xae, 0xcc, 0x44,
	0xdd, 0xc2, 0x7a, 0xa3, 0x64, 0x5d, 0x07, 0x6a, 0xdb, 0xc0, 0xa1, 0xdc, 0xc9, 0x85, 0x2a, 0x1b,
	0x42, 0x16, 0xca, 0x96, 0xc7, 0xbf, 0x1d, 0x88, 0xd1, 0x2f, 0x45, 0xc3, 0x62, 0xc1, 0x53, 0x2e,
	0x54, 0xb5, 0x23, 0x2f, 0xa1, 0xa3, 0x76, 0x1b, 0x4e, 0x5b, 0xfd, 0xf6, 0xc9, 0xc1, 0x99, 0x9f,
	0x88, 0x3c, 0xd5, 0x3d, 0x33, 0x28, 0xa1, 0xe0, 0x15, 0xcb, 0x42, 0xe4, 0xfc, 0x9e, 0xb6, 0x51,
	0x10, 0xb1, 0xa6, 0x25, 0x31, 0x38, 0x2b, 0xb5, 0xa5, 0x8e, 0x41, 0x75, 0x49, 0x8e, 0xc0, 0x5d,
	0x96, 0xd9, 0x8d, 0xa4, 0x1d, 0x8d, 0x8d, 0xdc, 0x3f, 0xef, 0xdb, 0x7e, 0x8b, 0x59, 0x8c, 0x10,
	0xe8, 0x88, 0x6c, 0xc5, 0xa9, 0x8b, 0x5c, 0xc0, 0x4c, 0x4d, 0x5e, 0x83, 0x83, 0xaf, 0xa6, 0xdd,
	0x7e, 0xeb, 0xa4, 0x77, 0x76, 0x98, 0x60, 0x9d, 0x96, 0x85, 0xb8, 0xb5, 0x0f, 0x63, 0x9a, 0xd3,
	0xf7, 0x67, 0x79, 0x5e, 0x71, 0x29, 0xa9, 0x87, 0xb2, 0x90, 0x35, 0xad, 0x36, 0x5c, 0xac, 0xc5,
	0x92, 0xfa, 0x7d, 0xe7, 0xc4, 0x65, 0xa6, 0x26, 0x6f, 0xc0, 0xd5, 0xbf, 0x03, 0x1a, 0x20, 0xd8,
	0x3b, 0x8b, 0x12, 0x9b, 0x44, 0x6d, 0x68, 0xb9, 0x46, 0x34, 0xa4, 0xf0, 0x5f, 0xd1, 0x90, 0xbc,
	0x05, 0xaf, 0xce, 0x9a, 0xf6, 0xcc, 0xf3, 0x9e, 0x24, 0x75, 0xff, 0xf0, 0x89, 0x8d, 0x06, 0xff,
	0x49, 0xb8, 0xe1, 0xbc, 0x4a, 0x9b, 0xac, 0x42, 0x3c, 0x13, 0xb1, 0x9e, 0xc6, 0x26, 0x75, 0x5e,
	0x47, 0x10, 0x18, 0x89, 0x90, 0x45, 0x4e, 0x23, 0xc3, 0xfb, 0x1a, 0x98, 0x62, 0x4f, 0x9e, 0x42,
	0x77, 0x95, 0x49, 0xc5, 0x2b, 0x7a, 0x60, 0x98, 0xba, 0xc3, 0xe1, 0x38, 0x38, 0x3e, 0x7a, 0x68,
	0x9e, 0x00, 0x09, 0xd6, 0x4d, 0x38, 0x58, 0x1e, 0x7f, 0x05, 0x1f, 0xc7, 0x29, 0x64, 0x8a, 0x0e,
	0x7d, 0x08, 0x55, 0x56, 0xdd, 0xe0, 0x74, 0x4d, 0x6f, 0xc6, 0x19, 0x31, 0xb0, 0xd8, 0x54, 0x4e,
	0x72, 0xfc, 0xdf, 0x91, 0x51, 0x17, 0x79, 0x7a, 0x97, 0x95, 0x5b, 0x6e, 0x06, 0xea, 0xb2, 0xb0,
	0x06, 0xe7, 0x1a, 0x3b, 0xfe, 0xdb, 0x86, 0x9e, 0xf5, 0xb4, 0xdb, 0xf1, 0x1c, 0xfc, 0x9c, 0x2f,
	0x53, 0x93, 0x74, 0xcb, 0x24, 0xed, 0x61, 0x7f, 0xa1, 0xc3, 0x46, 0x2a, 0x2b, 0x4b, 0x4b, 0xb5,
	0x2d, 0x85, 0xbd, 0xa1, 0x4e, 0x21, 0x68, 0x4e, 0x0d, 0x70, 0x43, 0xf6, 0xc4, 0xec, 0xd7, 0x2e,
	0x03, 0xad, 0x6d, 0x6c, 0x06, 0xb8, 0x39, 0xfb, 0xb4, 0xb5, 0xed, 0xe0, 0xa1, 0xef, 0x10, 0x37,
	0xe9, 0x11, 0xdf, 0xe1, 0x43, 0xdf, 0x21, 0xae, 0xd8, 0x23, 0xbe, 0x43, 0xf2, 0x0a, 0x5c, 0x1d,
	0x81, 0xde, 0x31, 0xad, 0x0b, 0x92, 0x26, 0x56, 0x66, 0x71, 0xf2, 0x0c, 0x3c, 0x7e, 0xaf, 0xd2,
	0x5b, 0xbe, 0xc3, 0x7d, 0x6b, 0xe1, 0x02, 0x77, 0xb1, 0xbd, 0xe4, 0x3b, 0x7d, 0xcb, 0x56, 0x14,
	0xf7, 0x36, 0x85, 0xbd, 0x5b, 0xe7, 0x6b, 0x5e, 0x5f, 0x73, 0x9a, 0x83, 0x57, 0x7f, 0x5c, 0x24,
	0x04, 0xff, 0xea, 0xfa, 0xfa, 0xcb, 0xe8, 0xfc, 0xe2, 0x32, 0x6e, 0x11, 0x1f, 0x3a, 0xf3, 0xf1,
	0xec, 0x53, 0xdc, 0x26, 0x1e, 0x38, 0xb3, 0xef, 0xd3, 0xd8, 0x21, 0x3d, 0xf0, 0xc6, 0x3f, 0x66,
	0x57, 0x93, 0xe9, 0x65, 0xdc, 0x21, 0x01, 0xb8, 0xf3, 0xf1, 0x74, 0x3c, 0x8b, 0x5d, 0x02, 0xd0,
	0x1d, 0xb1, 0xc9, 0x87, 0x8f, 0xe3, 0xb8, 0xab, 0x35, 0x9f, 0xcf, 0x2f, 0xe6, 0x57, 0xe7, 0xd3,
	0xd8, 0xd3, 0x27, 0xbf, 0x4d, 0x66, 0xb1, 0x3f, 0x8a, 0x7f, 0x1e, 0xbc, 0x33, 0x9f, 0xfb, 0x2f,
	0xdc, 0xbb, 0x42, 0xdc, 0xc8, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x47, 0x5b, 0x86, 0x44,
	0x04, 0x00, 0x00,
}
