// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sk-opts.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SkShutdown int32

const (
	SkShutdown_NONE  SkShutdown = 0
	SkShutdown_READ  SkShutdown = 1
	SkShutdown_WRITE SkShutdown = 2
	SkShutdown_BOTH  SkShutdown = 3
)

var SkShutdown_name = map[int32]string{
	0: "NONE",
	1: "READ",
	2: "WRITE",
	3: "BOTH",
}

var SkShutdown_value = map[string]int32{
	"NONE":  0,
	"READ":  1,
	"WRITE": 2,
	"BOTH":  3,
}

func (x SkShutdown) Enum() *SkShutdown {
	p := new(SkShutdown)
	*p = x
	return p
}

func (x SkShutdown) String() string {
	return proto.EnumName(SkShutdown_name, int32(x))
}

func (x *SkShutdown) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SkShutdown_value, data, "SkShutdown")
	if err != nil {
		return err
	}
	*x = SkShutdown(value)
	return nil
}

func (SkShutdown) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32059714d2770302, []int{0}
}

type SkOptsEntry struct {
	SoSndbuf             *uint32  `protobuf:"varint,1,req,name=so_sndbuf,json=soSndbuf" json:"so_sndbuf,omitempty"`
	SoRcvbuf             *uint32  `protobuf:"varint,2,req,name=so_rcvbuf,json=soRcvbuf" json:"so_rcvbuf,omitempty"`
	SoSndTmoSec          *uint64  `protobuf:"varint,3,req,name=so_snd_tmo_sec,json=soSndTmoSec" json:"so_snd_tmo_sec,omitempty"`
	SoSndTmoUsec         *uint64  `protobuf:"varint,4,req,name=so_snd_tmo_usec,json=soSndTmoUsec" json:"so_snd_tmo_usec,omitempty"`
	SoRcvTmoSec          *uint64  `protobuf:"varint,5,req,name=so_rcv_tmo_sec,json=soRcvTmoSec" json:"so_rcv_tmo_sec,omitempty"`
	SoRcvTmoUsec         *uint64  `protobuf:"varint,6,req,name=so_rcv_tmo_usec,json=soRcvTmoUsec" json:"so_rcv_tmo_usec,omitempty"`
	Reuseaddr            *bool    `protobuf:"varint,7,opt,name=reuseaddr" json:"reuseaddr,omitempty"`
	SoPriority           *uint32  `protobuf:"varint,8,opt,name=so_priority,json=soPriority" json:"so_priority,omitempty"`
	SoRcvlowat           *uint32  `protobuf:"varint,9,opt,name=so_rcvlowat,json=soRcvlowat" json:"so_rcvlowat,omitempty"`
	SoMark               *uint32  `protobuf:"varint,10,opt,name=so_mark,json=soMark" json:"so_mark,omitempty"`
	SoPasscred           *bool    `protobuf:"varint,11,opt,name=so_passcred,json=soPasscred" json:"so_passcred,omitempty"`
	SoPasssec            *bool    `protobuf:"varint,12,opt,name=so_passsec,json=soPasssec" json:"so_passsec,omitempty"`
	SoDontroute          *bool    `protobuf:"varint,13,opt,name=so_dontroute,json=soDontroute" json:"so_dontroute,omitempty"`
	SoNoCheck            *bool    `protobuf:"varint,14,opt,name=so_no_check,json=soNoCheck" json:"so_no_check,omitempty"`
	SoBoundDev           *string  `protobuf:"bytes,15,opt,name=so_bound_dev,json=soBoundDev" json:"so_bound_dev,omitempty"`
	SoFilter             []uint64 `protobuf:"fixed64,16,rep,name=so_filter,json=soFilter" json:"so_filter,omitempty"`
	SoReuseport          *bool    `protobuf:"varint,17,opt,name=so_reuseport,json=soReuseport" json:"so_reuseport,omitempty"`
	SoBroadcast          *bool    `protobuf:"varint,18,opt,name=so_broadcast,json=soBroadcast" json:"so_broadcast,omitempty"`
	SoKeepalive          *bool    `protobuf:"varint,19,opt,name=so_keepalive,json=soKeepalive" json:"so_keepalive,omitempty"`
	TcpKeepcnt           *uint32  `protobuf:"varint,20,opt,name=tcp_keepcnt,json=tcpKeepcnt" json:"tcp_keepcnt,omitempty"`
	TcpKeepidle          *uint32  `protobuf:"varint,21,opt,name=tcp_keepidle,json=tcpKeepidle" json:"tcp_keepidle,omitempty"`
	TcpKeepintvl         *uint32  `protobuf:"varint,22,opt,name=tcp_keepintvl,json=tcpKeepintvl" json:"tcp_keepintvl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkOptsEntry) Reset()         { *m = SkOptsEntry{} }
func (m *SkOptsEntry) String() string { return proto.CompactTextString(m) }
func (*SkOptsEntry) ProtoMessage()    {}
func (*SkOptsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_32059714d2770302, []int{0}
}

func (m *SkOptsEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkOptsEntry.Unmarshal(m, b)
}
func (m *SkOptsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkOptsEntry.Marshal(b, m, deterministic)
}
func (m *SkOptsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkOptsEntry.Merge(m, src)
}
func (m *SkOptsEntry) XXX_Size() int {
	return xxx_messageInfo_SkOptsEntry.Size(m)
}
func (m *SkOptsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SkOptsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SkOptsEntry proto.InternalMessageInfo

func (m *SkOptsEntry) GetSoSndbuf() uint32 {
	if m != nil && m.SoSndbuf != nil {
		return *m.SoSndbuf
	}
	return 0
}

func (m *SkOptsEntry) GetSoRcvbuf() uint32 {
	if m != nil && m.SoRcvbuf != nil {
		return *m.SoRcvbuf
	}
	return 0
}

func (m *SkOptsEntry) GetSoSndTmoSec() uint64 {
	if m != nil && m.SoSndTmoSec != nil {
		return *m.SoSndTmoSec
	}
	return 0
}

func (m *SkOptsEntry) GetSoSndTmoUsec() uint64 {
	if m != nil && m.SoSndTmoUsec != nil {
		return *m.SoSndTmoUsec
	}
	return 0
}

func (m *SkOptsEntry) GetSoRcvTmoSec() uint64 {
	if m != nil && m.SoRcvTmoSec != nil {
		return *m.SoRcvTmoSec
	}
	return 0
}

func (m *SkOptsEntry) GetSoRcvTmoUsec() uint64 {
	if m != nil && m.SoRcvTmoUsec != nil {
		return *m.SoRcvTmoUsec
	}
	return 0
}

func (m *SkOptsEntry) GetReuseaddr() bool {
	if m != nil && m.Reuseaddr != nil {
		return *m.Reuseaddr
	}
	return false
}

func (m *SkOptsEntry) GetSoPriority() uint32 {
	if m != nil && m.SoPriority != nil {
		return *m.SoPriority
	}
	return 0
}

func (m *SkOptsEntry) GetSoRcvlowat() uint32 {
	if m != nil && m.SoRcvlowat != nil {
		return *m.SoRcvlowat
	}
	return 0
}

func (m *SkOptsEntry) GetSoMark() uint32 {
	if m != nil && m.SoMark != nil {
		return *m.SoMark
	}
	return 0
}

func (m *SkOptsEntry) GetSoPasscred() bool {
	if m != nil && m.SoPasscred != nil {
		return *m.SoPasscred
	}
	return false
}

func (m *SkOptsEntry) GetSoPasssec() bool {
	if m != nil && m.SoPasssec != nil {
		return *m.SoPasssec
	}
	return false
}

func (m *SkOptsEntry) GetSoDontroute() bool {
	if m != nil && m.SoDontroute != nil {
		return *m.SoDontroute
	}
	return false
}

func (m *SkOptsEntry) GetSoNoCheck() bool {
	if m != nil && m.SoNoCheck != nil {
		return *m.SoNoCheck
	}
	return false
}

func (m *SkOptsEntry) GetSoBoundDev() string {
	if m != nil && m.SoBoundDev != nil {
		return *m.SoBoundDev
	}
	return ""
}

func (m *SkOptsEntry) GetSoFilter() []uint64 {
	if m != nil {
		return m.SoFilter
	}
	return nil
}

func (m *SkOptsEntry) GetSoReuseport() bool {
	if m != nil && m.SoReuseport != nil {
		return *m.SoReuseport
	}
	return false
}

func (m *SkOptsEntry) GetSoBroadcast() bool {
	if m != nil && m.SoBroadcast != nil {
		return *m.SoBroadcast
	}
	return false
}

func (m *SkOptsEntry) GetSoKeepalive() bool {
	if m != nil && m.SoKeepalive != nil {
		return *m.SoKeepalive
	}
	return false
}

func (m *SkOptsEntry) GetTcpKeepcnt() uint32 {
	if m != nil && m.TcpKeepcnt != nil {
		return *m.TcpKeepcnt
	}
	return 0
}

func (m *SkOptsEntry) GetTcpKeepidle() uint32 {
	if m != nil && m.TcpKeepidle != nil {
		return *m.TcpKeepidle
	}
	return 0
}

func (m *SkOptsEntry) GetTcpKeepintvl() uint32 {
	if m != nil && m.TcpKeepintvl != nil {
		return *m.TcpKeepintvl
	}
	return 0
}

func init() {
	proto.RegisterEnum("SkShutdown", SkShutdown_name, SkShutdown_value)
	proto.RegisterType((*SkOptsEntry)(nil), "sk_opts_entry")
}

func init() {
	proto.RegisterFile("sk-opts.proto", fileDescriptor_32059714d2770302)
}

var fileDescriptor_32059714d2770302 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x93, 0xdb, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xe9, 0x71, 0x1b, 0xb7, 0xe9, 0x06, 0x73, 0xb2, 0xc4, 0xa9, 0x80, 0x90, 0x2a, 0x24,
	0xe0, 0x8e, 0x7b, 0x4a, 0x8b, 0x40, 0x2b, 0xba, 0x28, 0x5b, 0x84, 0xc4, 0x4d, 0x94, 0xc6, 0x5e,
	0x36, 0x4a, 0x9a, 0x89, 0x6c, 0x27, 0xab, 0x7d, 0x69, 0x9e, 0x81, 0xb1, 0x63, 0x17, 0xf6, 0xaa,
	0xf5, 0x37, 0x5f, 0xfe, 0x99, 0x8e, 0x1b, 0x12, 0xaa, 0xe2, 0x2d, 0xd4, 0x5a, 0xbd, 0xab, 0x25,
	0x68, 0x78, 0xf9, 0x67, 0x64, 0x48, 0x62, 0x48, 0x22, 0x2a, 0x2d, 0x6f, 0xe8, 0x63, 0x12, 0x28,
	0x48, 0x54, 0xc5, 0xf7, 0xcd, 0x25, 0xeb, 0x2d, 0xfa, 0xcb, 0x30, 0x9e, 0x28, 0xb8, 0xb0, 0x67,
	0x57, 0x94, 0x59, 0x6b, 0x8a, 0x7d, 0x5f, 0x8c, 0xed, 0x99, 0xbe, 0x22, 0xf3, 0xee, 0xc9, 0x44,
	0x1f, 0xf0, 0x53, 0x64, 0x6c, 0x80, 0xc6, 0x30, 0x9e, 0xda, 0xc7, 0x77, 0x07, 0xb8, 0x10, 0x19,
	0x7d, 0x4d, 0x4e, 0xff, 0x93, 0x1a, 0x63, 0x0d, 0xad, 0x35, 0xf3, 0xd6, 0x0f, 0x64, 0x2e, 0x0b,
	0x1b, 0x1d, 0xb3, 0x46, 0x3e, 0x0b, 0xbb, 0xdd, 0xca, 0xf2, 0x92, 0xcd, 0x1a, 0xfb, 0xac, 0xce,
	0xb2, 0x59, 0x4f, 0x48, 0x20, 0x05, 0x56, 0x53, 0xce, 0x25, 0x3b, 0x59, 0xf4, 0x96, 0x93, 0xf8,
	0x1f, 0xa0, 0xcf, 0x09, 0x66, 0x26, 0xb5, 0xcc, 0x41, 0xe6, 0xfa, 0x86, 0x4d, 0xb0, 0x1e, 0xc6,
	0x44, 0xc1, 0x77, 0x47, 0x9c, 0x80, 0x5d, 0x4a, 0xb8, 0x4e, 0x35, 0x0b, 0xbc, 0x10, 0x3b, 0x42,
	0x1f, 0x91, 0x13, 0x14, 0x0e, 0xa9, 0x2c, 0x18, 0xb1, 0xc5, 0xb1, 0x82, 0x6f, 0x78, 0xf2, 0xd1,
	0xa9, 0x52, 0x99, 0x14, 0x9c, 0x4d, 0x6d, 0x6b, 0x13, 0xed, 0x08, 0x7d, 0x4a, 0x88, 0x13, 0xcc,
	0xec, 0xb3, 0x6e, 0xb4, 0xae, 0x6e, 0x06, 0x7f, 0x41, 0xf0, 0x87, 0x24, 0x1c, 0xf0, 0x5e, 0xa0,
	0xd1, 0x82, 0x85, 0x56, 0xc0, 0xcc, 0xb5, 0x47, 0xf4, 0x99, 0x6d, 0x51, 0x41, 0x92, 0x5d, 0x89,
	0xac, 0x60, 0x73, 0x1f, 0xb1, 0x85, 0x4f, 0x06, 0xd0, 0x85, 0x8d, 0xd8, 0x43, 0x83, 0x0b, 0xe7,
	0xa2, 0x65, 0xa7, 0x28, 0x04, 0x66, 0x86, 0x95, 0x41, 0x6b, 0xd1, 0xba, 0x2b, 0xbd, 0xcc, 0x4b,
	0x2d, 0x24, 0x8b, 0x16, 0x83, 0xe5, 0xd8, 0x5c, 0xe9, 0x67, 0x7b, 0x76, 0x13, 0xd8, 0x65, 0xd5,
	0x20, 0x35, 0xbb, 0xeb, 0x27, 0x88, 0x3d, 0x72, 0xca, 0x5e, 0x42, 0xca, 0xb3, 0x54, 0x69, 0x46,
	0xbd, 0xb2, 0xf2, 0xc8, 0x29, 0x85, 0x10, 0x75, 0x5a, 0xe6, 0xad, 0x60, 0xf7, 0xbc, 0x72, 0xe6,
	0x91, 0x59, 0x95, 0xce, 0x6a, 0xeb, 0x64, 0x95, 0x66, 0xf7, 0xbb, 0x25, 0x23, 0x3a, 0xeb, 0x88,
	0xc9, 0xf0, 0x42, 0xce, 0x4b, 0xc1, 0x1e, 0x58, 0x63, 0xea, 0x0c, 0x83, 0xf0, 0x3f, 0x13, 0x1e,
	0x95, 0x4a, 0xb7, 0x25, 0x7b, 0x68, 0x9d, 0x99, 0x77, 0x0c, 0x7b, 0xf3, 0x01, 0x17, 0x56, 0x24,
	0xea, 0xaa, 0xd1, 0x1c, 0xae, 0x2b, 0x3a, 0x21, 0xc3, 0xed, 0xf9, 0x76, 0x13, 0xdd, 0x31, 0xdf,
	0xe2, 0xcd, 0xc7, 0x75, 0xd4, 0xa3, 0x01, 0x19, 0xfd, 0x8c, 0xbf, 0xee, 0x36, 0x51, 0xdf, 0xc0,
	0xd5, 0xf9, 0xee, 0x4b, 0x34, 0x58, 0x45, 0xbf, 0xe6, 0xef, 0xed, 0x2b, 0xb3, 0xcf, 0x2b, 0x9e,
	0x57, 0xbf, 0xd5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x1c, 0x12, 0x2d, 0x4a, 0x03, 0x00,
	0x00,
}
