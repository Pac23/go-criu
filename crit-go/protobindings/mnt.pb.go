// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mnt.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Fstype int32

const (
	Fstype_UNSUPPORTED Fstype = 0
	Fstype_PROC        Fstype = 1
	Fstype_SYSFS       Fstype = 2
	Fstype_DEVTMPFS    Fstype = 3
	Fstype_BINFMT_MISC Fstype = 4
	Fstype_TMPFS       Fstype = 5
	Fstype_DEVPTS      Fstype = 6
	Fstype_SIMFS       Fstype = 7
	Fstype_PSTORE      Fstype = 8
	Fstype_SECURITYFS  Fstype = 9
	Fstype_FUSECTL     Fstype = 10
	Fstype_DEBUGFS     Fstype = 11
	Fstype_CGROUP      Fstype = 12
	Fstype_AUFS        Fstype = 13
	Fstype_MQUEUE      Fstype = 14
	Fstype_FUSE        Fstype = 15
	Fstype_AUTO        Fstype = 16
	Fstype_OVERLAYFS   Fstype = 17
	Fstype_AUTOFS      Fstype = 18
	Fstype_TRACEFS     Fstype = 19
	Fstype_CGROUP2     Fstype = 23
)

var Fstype_name = map[int32]string{
	0:  "UNSUPPORTED",
	1:  "PROC",
	2:  "SYSFS",
	3:  "DEVTMPFS",
	4:  "BINFMT_MISC",
	5:  "TMPFS",
	6:  "DEVPTS",
	7:  "SIMFS",
	8:  "PSTORE",
	9:  "SECURITYFS",
	10: "FUSECTL",
	11: "DEBUGFS",
	12: "CGROUP",
	13: "AUFS",
	14: "MQUEUE",
	15: "FUSE",
	16: "AUTO",
	17: "OVERLAYFS",
	18: "AUTOFS",
	19: "TRACEFS",
	23: "CGROUP2",
}

var Fstype_value = map[string]int32{
	"UNSUPPORTED": 0,
	"PROC":        1,
	"SYSFS":       2,
	"DEVTMPFS":    3,
	"BINFMT_MISC": 4,
	"TMPFS":       5,
	"DEVPTS":      6,
	"SIMFS":       7,
	"PSTORE":      8,
	"SECURITYFS":  9,
	"FUSECTL":     10,
	"DEBUGFS":     11,
	"CGROUP":      12,
	"AUFS":        13,
	"MQUEUE":      14,
	"FUSE":        15,
	"AUTO":        16,
	"OVERLAYFS":   17,
	"AUTOFS":      18,
	"TRACEFS":     19,
	"CGROUP2":     23,
}

func (x Fstype) Enum() *Fstype {
	p := new(Fstype)
	*p = x
	return p
}

func (x Fstype) String() string {
	return proto.EnumName(Fstype_name, int32(x))
}

func (x *Fstype) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fstype_value, data, "Fstype")
	if err != nil {
		return err
	}
	*x = Fstype(value)
	return nil
}

func (Fstype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31d0fa468866a2a1, []int{0}
}

type MntEntry struct {
	Fstype          *uint32 `protobuf:"varint,1,req,name=fstype" json:"fstype,omitempty"`
	MntId           *uint32 `protobuf:"varint,2,req,name=mnt_id,json=mntId" json:"mnt_id,omitempty"`
	RootDev         *uint32 `protobuf:"varint,3,req,name=root_dev,json=rootDev" json:"root_dev,omitempty"`
	ParentMntId     *uint32 `protobuf:"varint,4,req,name=parent_mnt_id,json=parentMntId" json:"parent_mnt_id,omitempty"`
	Flags           *uint32 `protobuf:"varint,5,req,name=flags" json:"flags,omitempty"`
	Root            *string `protobuf:"bytes,6,req,name=root" json:"root,omitempty"`
	Mountpoint      *string `protobuf:"bytes,7,req,name=mountpoint" json:"mountpoint,omitempty"`
	Source          *string `protobuf:"bytes,8,req,name=source" json:"source,omitempty"`
	Options         *string `protobuf:"bytes,9,req,name=options" json:"options,omitempty"`
	SharedId        *uint32 `protobuf:"varint,10,opt,name=shared_id,json=sharedId" json:"shared_id,omitempty"`
	MasterId        *uint32 `protobuf:"varint,11,opt,name=master_id,json=masterId" json:"master_id,omitempty"`
	WithPlugin      *bool   `protobuf:"varint,12,opt,name=with_plugin,json=withPlugin" json:"with_plugin,omitempty"`
	ExtMount        *bool   `protobuf:"varint,13,opt,name=ext_mount,json=extMount" json:"ext_mount,omitempty"`
	Fsname          *string `protobuf:"bytes,14,opt,name=fsname" json:"fsname,omitempty"`
	InternalSharing *bool   `protobuf:"varint,15,opt,name=internal_sharing,json=internalSharing" json:"internal_sharing,omitempty"`
	Deleted         *bool   `protobuf:"varint,16,opt,name=deleted" json:"deleted,omitempty"`
	SbFlags         *uint32 `protobuf:"varint,17,opt,name=sb_flags,json=sbFlags" json:"sb_flags,omitempty"`
	// user defined mapping for external mount
	ExtKey               *string  `protobuf:"bytes,18,opt,name=ext_key,json=extKey" json:"ext_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MntEntry) Reset()         { *m = MntEntry{} }
func (m *MntEntry) String() string { return proto.CompactTextString(m) }
func (*MntEntry) ProtoMessage()    {}
func (*MntEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d0fa468866a2a1, []int{0}
}

func (m *MntEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MntEntry.Unmarshal(m, b)
}
func (m *MntEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MntEntry.Marshal(b, m, deterministic)
}
func (m *MntEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MntEntry.Merge(m, src)
}
func (m *MntEntry) XXX_Size() int {
	return xxx_messageInfo_MntEntry.Size(m)
}
func (m *MntEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MntEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MntEntry proto.InternalMessageInfo

func (m *MntEntry) GetFstype() uint32 {
	if m != nil && m.Fstype != nil {
		return *m.Fstype
	}
	return 0
}

func (m *MntEntry) GetMntId() uint32 {
	if m != nil && m.MntId != nil {
		return *m.MntId
	}
	return 0
}

func (m *MntEntry) GetRootDev() uint32 {
	if m != nil && m.RootDev != nil {
		return *m.RootDev
	}
	return 0
}

func (m *MntEntry) GetParentMntId() uint32 {
	if m != nil && m.ParentMntId != nil {
		return *m.ParentMntId
	}
	return 0
}

func (m *MntEntry) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *MntEntry) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

func (m *MntEntry) GetMountpoint() string {
	if m != nil && m.Mountpoint != nil {
		return *m.Mountpoint
	}
	return ""
}

func (m *MntEntry) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *MntEntry) GetOptions() string {
	if m != nil && m.Options != nil {
		return *m.Options
	}
	return ""
}

func (m *MntEntry) GetSharedId() uint32 {
	if m != nil && m.SharedId != nil {
		return *m.SharedId
	}
	return 0
}

func (m *MntEntry) GetMasterId() uint32 {
	if m != nil && m.MasterId != nil {
		return *m.MasterId
	}
	return 0
}

func (m *MntEntry) GetWithPlugin() bool {
	if m != nil && m.WithPlugin != nil {
		return *m.WithPlugin
	}
	return false
}

func (m *MntEntry) GetExtMount() bool {
	if m != nil && m.ExtMount != nil {
		return *m.ExtMount
	}
	return false
}

func (m *MntEntry) GetFsname() string {
	if m != nil && m.Fsname != nil {
		return *m.Fsname
	}
	return ""
}

func (m *MntEntry) GetInternalSharing() bool {
	if m != nil && m.InternalSharing != nil {
		return *m.InternalSharing
	}
	return false
}

func (m *MntEntry) GetDeleted() bool {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return false
}

func (m *MntEntry) GetSbFlags() uint32 {
	if m != nil && m.SbFlags != nil {
		return *m.SbFlags
	}
	return 0
}

func (m *MntEntry) GetExtKey() string {
	if m != nil && m.ExtKey != nil {
		return *m.ExtKey
	}
	return ""
}

func init() {
	proto.RegisterEnum("Fstype", Fstype_name, Fstype_value)
	proto.RegisterType((*MntEntry)(nil), "mnt_entry")
}

func init() {
	proto.RegisterFile("mnt.proto", fileDescriptor_31d0fa468866a2a1)
}

var fileDescriptor_31d0fa468866a2a1 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x93, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x49, 0x9a, 0xc4, 0xf6, 0xb8, 0x49, 0xb6, 0x8b, 0xa0, 0x2b, 0x90, 0x20, 0xea, 0x13,
	0xf0, 0x00, 0x12, 0x17, 0x40, 0x4d, 0xe2, 0x54, 0x11, 0x75, 0x6d, 0xd6, 0x76, 0xa5, 0xf2, 0x62,
	0xa5, 0x78, 0xdb, 0x5a, 0x24, 0xb6, 0x65, 0x3b, 0x85, 0xdc, 0x02, 0x89, 0x9b, 0x71, 0x22, 0x66,
	0x76, 0x13, 0xc4, 0xdb, 0xfe, 0xdf, 0x3f, 0x33, 0xf9, 0x67, 0x92, 0x80, 0xb3, 0x29, 0xda, 0xf7,
	0x55, 0x5d, 0xb6, 0xe5, 0x0b, 0x28, 0xab, 0xb6, 0x31, 0xef, 0xb3, 0xdf, 0x3d, 0xed, 0xa4, 0xaa,
	0x68, 0xeb, 0x1d, 0x7f, 0x0e, 0x83, 0xbb, 0xa6, 0xdd, 0x55, 0x4a, 0x74, 0x26, 0xdd, 0x37, 0x43,
	0xb9, 0x57, 0xfc, 0x19, 0x0c, 0xa8, 0x28, 0xcf, 0x44, 0x57, 0xf3, 0x3e, 0xaa, 0x65, 0xc6, 0x27,
	0x60, 0xd7, 0x65, 0xd9, 0xa6, 0x99, 0x7a, 0x14, 0x47, 0x64, 0x4c, 0xfb, 0x7f, 0x3e, 0x75, 0x27,
	0x1d, 0x69, 0x11, 0x9e, 0xab, 0x47, 0x7e, 0x06, 0xc3, 0x6a, 0x55, 0xe3, 0xf0, 0x74, 0xdf, 0xdf,
	0xd3, 0xfd, 0xae, 0x81, 0xbe, 0x9e, 0xf2, 0x12, 0xfa, 0x77, 0xeb, 0xd5, 0x7d, 0x23, 0xfa, 0xff,
	0x46, 0xd8, 0x1d, 0x69, 0x18, 0xe7, 0xd0, 0xa3, 0x59, 0x62, 0x80, 0x9e, 0x23, 0xf5, 0x9b, 0xbf,
	0x02, 0xd8, 0x94, 0xdb, 0xa2, 0xad, 0xca, 0xbc, 0x68, 0x85, 0xa5, 0x9d, 0xff, 0x08, 0x6d, 0xd1,
	0x94, 0xdb, 0xfa, 0x9b, 0x12, 0xb6, 0xf6, 0xf6, 0x8a, 0x0b, 0xb0, 0x70, 0xf3, 0xbc, 0x2c, 0x1a,
	0xe1, 0x68, 0xe3, 0x20, 0x31, 0x82, 0xd3, 0x3c, 0x60, 0xa4, 0x8c, 0x22, 0xc2, 0xa4, 0x83, 0x11,
	0x6d, 0x03, 0x74, 0x3e, 0x67, 0xb3, 0x6a, 0x5a, 0x55, 0x93, 0xe9, 0x1a, 0xd3, 0x00, 0x34, 0x5f,
	0x83, 0xfb, 0x23, 0x6f, 0x1f, 0xd2, 0x6a, 0xbd, 0xbd, 0xcf, 0x0b, 0x71, 0x8c, 0xb6, 0x2d, 0x81,
	0x50, 0xa8, 0x09, 0x75, 0xab, 0x9f, 0xb8, 0x3e, 0xc5, 0x13, 0x43, 0x6d, 0xdb, 0x08, 0x7c, 0xd2,
	0xe6, 0xde, 0xc5, 0x6a, 0xa3, 0xc4, 0x08, 0x1d, 0x47, 0xee, 0x15, 0x7f, 0x0b, 0x0c, 0x17, 0x51,
	0x75, 0xb1, 0x5a, 0xa7, 0x94, 0x23, 0x2f, 0xee, 0xc5, 0x58, 0xf7, 0x8e, 0x0f, 0x3c, 0x32, 0x98,
	0x96, 0xca, 0xd4, 0x5a, 0xb5, 0x2a, 0x13, 0x4c, 0x57, 0x1c, 0x24, 0x7d, 0x3b, 0xcd, 0x6d, 0x6a,
	0x4e, 0x7b, 0x42, 0xb1, 0x0f, 0xa7, 0xb5, 0x9a, 0xdb, 0x85, 0x3e, 0xee, 0x29, 0x58, 0x94, 0xed,
	0xbb, 0xda, 0x09, 0x6e, 0x3e, 0x1f, 0xe5, 0x67, 0xb5, 0x7b, 0xf7, 0xab, 0x7b, 0xf8, 0x21, 0xf0,
	0x31, 0xb8, 0xc9, 0x55, 0x94, 0x84, 0x61, 0x20, 0x63, 0x6f, 0xce, 0x9e, 0x70, 0x1b, 0x7a, 0xa1,
	0x0c, 0x66, 0xac, 0xc3, 0x1d, 0xe8, 0x47, 0x37, 0xd1, 0x22, 0x62, 0x5d, 0x7e, 0x0c, 0xf6, 0xdc,
	0xbb, 0x8e, 0xfd, 0x10, 0xd5, 0x11, 0xf5, 0x4c, 0x97, 0x57, 0x0b, 0x3f, 0x4e, 0xfd, 0x65, 0x34,
	0x63, 0x3d, 0xaa, 0x34, 0x5e, 0x9f, 0x03, 0x0c, 0xb0, 0x32, 0x8c, 0x23, 0x36, 0xd0, 0x03, 0x96,
	0x3e, 0x62, 0x8b, 0x70, 0x18, 0xc5, 0x81, 0xf4, 0x98, 0xcd, 0x47, 0x00, 0x91, 0x37, 0x4b, 0xe4,
	0x32, 0xbe, 0x41, 0xcf, 0xe1, 0x2e, 0x58, 0x8b, 0x04, 0x49, 0x7c, 0xc9, 0x80, 0xc4, 0xdc, 0x9b,
	0x26, 0x17, 0xe8, 0xb8, 0xd4, 0x35, 0xbb, 0x90, 0x41, 0x12, 0xb2, 0x63, 0xca, 0x75, 0x9e, 0x20,
	0x1d, 0x12, 0xf5, 0xbf, 0x24, 0x5e, 0xe2, 0xb1, 0x11, 0x51, 0xea, 0x65, 0x63, 0xe3, 0xc7, 0x01,
	0x63, 0x7c, 0x08, 0x4e, 0x70, 0xed, 0xc9, 0xcb, 0x73, 0x1a, 0x7f, 0x42, 0xe5, 0x64, 0xe0, 0x9b,
	0xd3, 0xf4, 0x58, 0x9e, 0xcf, 0x3c, 0x14, 0x4f, 0x49, 0x98, 0xe9, 0x1f, 0xd9, 0xe9, 0x94, 0x7d,
	0x1d, 0x7d, 0xd0, 0x7f, 0x99, 0xdb, 0xbc, 0xc8, 0xf0, 0xf0, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0x3a, 0x3a, 0xdc, 0x52, 0x03, 0x00, 0x00,
}
