// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sk-inet.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpOptsRawEntry struct {
	Hdrincl              *bool    `protobuf:"varint,1,opt,name=hdrincl" json:"hdrincl,omitempty"`
	Nodefrag             *bool    `protobuf:"varint,2,opt,name=nodefrag" json:"nodefrag,omitempty"`
	Checksum             *bool    `protobuf:"varint,3,opt,name=checksum" json:"checksum,omitempty"`
	IcmpvFilter          []uint32 `protobuf:"varint,4,rep,name=icmpv_filter,json=icmpvFilter" json:"icmpv_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpOptsRawEntry) Reset()         { *m = IpOptsRawEntry{} }
func (m *IpOptsRawEntry) String() string { return proto.CompactTextString(m) }
func (*IpOptsRawEntry) ProtoMessage()    {}
func (*IpOptsRawEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ac9c694fb51bcc, []int{0}
}

func (m *IpOptsRawEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpOptsRawEntry.Unmarshal(m, b)
}
func (m *IpOptsRawEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpOptsRawEntry.Marshal(b, m, deterministic)
}
func (m *IpOptsRawEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpOptsRawEntry.Merge(m, src)
}
func (m *IpOptsRawEntry) XXX_Size() int {
	return xxx_messageInfo_IpOptsRawEntry.Size(m)
}
func (m *IpOptsRawEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IpOptsRawEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IpOptsRawEntry proto.InternalMessageInfo

func (m *IpOptsRawEntry) GetHdrincl() bool {
	if m != nil && m.Hdrincl != nil {
		return *m.Hdrincl
	}
	return false
}

func (m *IpOptsRawEntry) GetNodefrag() bool {
	if m != nil && m.Nodefrag != nil {
		return *m.Nodefrag
	}
	return false
}

func (m *IpOptsRawEntry) GetChecksum() bool {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return false
}

func (m *IpOptsRawEntry) GetIcmpvFilter() []uint32 {
	if m != nil {
		return m.IcmpvFilter
	}
	return nil
}

type IpOptsEntry struct {
	Freebind *bool `protobuf:"varint,1,opt,name=freebind" json:"freebind,omitempty"`
	// Fields 2 and 3 are reserved for vz7 use
	Raw                  *IpOptsRawEntry `protobuf:"bytes,4,opt,name=raw" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IpOptsEntry) Reset()         { *m = IpOptsEntry{} }
func (m *IpOptsEntry) String() string { return proto.CompactTextString(m) }
func (*IpOptsEntry) ProtoMessage()    {}
func (*IpOptsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ac9c694fb51bcc, []int{1}
}

func (m *IpOptsEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpOptsEntry.Unmarshal(m, b)
}
func (m *IpOptsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpOptsEntry.Marshal(b, m, deterministic)
}
func (m *IpOptsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpOptsEntry.Merge(m, src)
}
func (m *IpOptsEntry) XXX_Size() int {
	return xxx_messageInfo_IpOptsEntry.Size(m)
}
func (m *IpOptsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IpOptsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IpOptsEntry proto.InternalMessageInfo

func (m *IpOptsEntry) GetFreebind() bool {
	if m != nil && m.Freebind != nil {
		return *m.Freebind
	}
	return false
}

func (m *IpOptsEntry) GetRaw() *IpOptsRawEntry {
	if m != nil {
		return m.Raw
	}
	return nil
}

type InetSkEntry struct {
	//
	// We have two IDs here -- id and ino. The first one
	// is used when restoring socket behind a file descriprot.
	// The fdinfo image's id is it. The second one is used
	// in sk-inet.c internally, in particular we identify
	// a TCP stream to restore into this socket using the
	// ino value.
	Id      *uint32      `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Ino     *uint32      `protobuf:"varint,2,req,name=ino" json:"ino,omitempty"`
	Family  *uint32      `protobuf:"varint,3,req,name=family" json:"family,omitempty"`
	Type    *uint32      `protobuf:"varint,4,req,name=type" json:"type,omitempty"`
	Proto   *uint32      `protobuf:"varint,5,req,name=proto" json:"proto,omitempty"`
	State   *uint32      `protobuf:"varint,6,req,name=state" json:"state,omitempty"`
	SrcPort *uint32      `protobuf:"varint,7,req,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort *uint32      `protobuf:"varint,8,req,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Flags   *uint32      `protobuf:"varint,9,req,name=flags" json:"flags,omitempty"`
	Backlog *uint32      `protobuf:"varint,10,req,name=backlog" json:"backlog,omitempty"`
	SrcAddr []uint32     `protobuf:"varint,11,rep,name=src_addr,json=srcAddr" json:"src_addr,omitempty"`
	DstAddr []uint32     `protobuf:"varint,12,rep,name=dst_addr,json=dstAddr" json:"dst_addr,omitempty"`
	Fown    *FownEntry   `protobuf:"bytes,13,req,name=fown" json:"fown,omitempty"`
	Opts    *SkOptsEntry `protobuf:"bytes,14,req,name=opts" json:"opts,omitempty"`
	V6Only  *bool        `protobuf:"varint,15,opt,name=v6only" json:"v6only,omitempty"`
	IpOpts  *IpOptsEntry `protobuf:"bytes,16,opt,name=ip_opts,json=ipOpts" json:"ip_opts,omitempty"`
	// for ipv6, we need to send the ifindex to bind(); we keep the ifname
	// here and convert it on restore
	Ifname               *string     `protobuf:"bytes,17,opt,name=ifname" json:"ifname,omitempty"`
	NsId                 *uint32     `protobuf:"varint,18,opt,name=ns_id,json=nsId" json:"ns_id,omitempty"`
	Shutdown             *SkShutdown `protobuf:"varint,19,opt,name=shutdown,enum=SkShutdown" json:"shutdown,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InetSkEntry) Reset()         { *m = InetSkEntry{} }
func (m *InetSkEntry) String() string { return proto.CompactTextString(m) }
func (*InetSkEntry) ProtoMessage()    {}
func (*InetSkEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ac9c694fb51bcc, []int{2}
}

func (m *InetSkEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InetSkEntry.Unmarshal(m, b)
}
func (m *InetSkEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InetSkEntry.Marshal(b, m, deterministic)
}
func (m *InetSkEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InetSkEntry.Merge(m, src)
}
func (m *InetSkEntry) XXX_Size() int {
	return xxx_messageInfo_InetSkEntry.Size(m)
}
func (m *InetSkEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_InetSkEntry.DiscardUnknown(m)
}

var xxx_messageInfo_InetSkEntry proto.InternalMessageInfo

func (m *InetSkEntry) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InetSkEntry) GetIno() uint32 {
	if m != nil && m.Ino != nil {
		return *m.Ino
	}
	return 0
}

func (m *InetSkEntry) GetFamily() uint32 {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return 0
}

func (m *InetSkEntry) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *InetSkEntry) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return 0
}

func (m *InetSkEntry) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *InetSkEntry) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *InetSkEntry) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *InetSkEntry) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *InetSkEntry) GetBacklog() uint32 {
	if m != nil && m.Backlog != nil {
		return *m.Backlog
	}
	return 0
}

func (m *InetSkEntry) GetSrcAddr() []uint32 {
	if m != nil {
		return m.SrcAddr
	}
	return nil
}

func (m *InetSkEntry) GetDstAddr() []uint32 {
	if m != nil {
		return m.DstAddr
	}
	return nil
}

func (m *InetSkEntry) GetFown() *FownEntry {
	if m != nil {
		return m.Fown
	}
	return nil
}

func (m *InetSkEntry) GetOpts() *SkOptsEntry {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *InetSkEntry) GetV6Only() bool {
	if m != nil && m.V6Only != nil {
		return *m.V6Only
	}
	return false
}

func (m *InetSkEntry) GetIpOpts() *IpOptsEntry {
	if m != nil {
		return m.IpOpts
	}
	return nil
}

func (m *InetSkEntry) GetIfname() string {
	if m != nil && m.Ifname != nil {
		return *m.Ifname
	}
	return ""
}

func (m *InetSkEntry) GetNsId() uint32 {
	if m != nil && m.NsId != nil {
		return *m.NsId
	}
	return 0
}

func (m *InetSkEntry) GetShutdown() SkShutdown {
	if m != nil && m.Shutdown != nil {
		return *m.Shutdown
	}
	return SkShutdown_NONE
}

func init() {
	proto.RegisterType((*IpOptsRawEntry)(nil), "ip_opts_raw_entry")
	proto.RegisterType((*IpOptsEntry)(nil), "ip_opts_entry")
	proto.RegisterType((*InetSkEntry)(nil), "inet_sk_entry")
}

func init() {
	proto.RegisterFile("sk-inet.proto", fileDescriptor_a0ac9c694fb51bcc)
}

var fileDescriptor_a0ac9c694fb51bcc = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0xcb, 0x6e, 0xdb, 0x30,
	0x10, 0x84, 0x6c, 0xf9, 0x91, 0x55, 0xa4, 0x3a, 0x0c, 0x50, 0xb0, 0x09, 0x8a, 0xb8, 0x46, 0x81,
	0xfa, 0x52, 0x15, 0xf0, 0xa1, 0xd7, 0xa0, 0x39, 0x14, 0xe8, 0xa9, 0x2d, 0x8f, 0xbd, 0x08, 0x8a,
	0x44, 0xd9, 0x84, 0x64, 0x4a, 0x20, 0x99, 0x04, 0xfe, 0x83, 0xfe, 0x53, 0xff, 0x22, 0x5f, 0xd4,
	0x25, 0x45, 0x39, 0x70, 0x7b, 0xe3, 0xcc, 0x2c, 0x67, 0x77, 0x39, 0x84, 0x58, 0xd7, 0x1f, 0x85,
	0xe4, 0x26, 0xed, 0x54, 0x6b, 0xda, 0x2b, 0x68, 0x3b, 0xa3, 0x87, 0x73, 0xd5, 0x3e, 0x49, 0x7f,
	0xb6, 0x65, 0x2f, 0xd2, 0xea, 0x77, 0x00, 0x17, 0xa2, 0xcb, 0x2c, 0x93, 0xa9, 0xfc, 0x29, 0xe3,
	0xd2, 0xa8, 0x03, 0xa1, 0x30, 0xdb, 0x95, 0x4a, 0xc8, 0xa2, 0xa1, 0xc1, 0x32, 0x58, 0xcf, 0xd9,
	0x00, 0xc9, 0x15, 0xcc, 0x65, 0x5b, 0xf2, 0x4a, 0xe5, 0x5b, 0x3a, 0x72, 0xd2, 0x11, 0x5b, 0xad,
	0xd8, 0xf1, 0xa2, 0xd6, 0x0f, 0x7b, 0x3a, 0xee, 0xb5, 0x01, 0x93, 0x77, 0x70, 0x2e, 0x8a, 0x7d,
	0xf7, 0x98, 0x55, 0xa2, 0x31, 0x5c, 0xd1, 0x70, 0x39, 0x5e, 0xc7, 0x2c, 0x72, 0xdc, 0x57, 0x47,
	0xad, 0x7e, 0x42, 0x3c, 0x4c, 0xd2, 0x4f, 0x81, 0x7e, 0x95, 0xe2, 0xfc, 0x5e, 0xc8, 0xd2, 0x8f,
	0x71, 0xc4, 0xe4, 0x3d, 0x8c, 0x71, 0x5c, 0xb4, 0x09, 0xd6, 0xd1, 0x86, 0xa4, 0xff, 0xad, 0xc0,
	0xac, 0xbc, 0xfa, 0x13, 0xa2, 0x27, 0xbe, 0x49, 0xa6, 0x6b, 0xef, 0x99, 0xc0, 0x48, 0x58, 0xb7,
	0x11, 0x76, 0xc7, 0x13, 0x59, 0xc0, 0x58, 0xc8, 0x16, 0x57, 0xb1, 0x84, 0x3d, 0x92, 0x1b, 0x98,
	0x56, 0xf9, 0x5e, 0x34, 0x07, 0xdc, 0x01, 0xc9, 0xbb, 0xd9, 0xf3, 0x6d, 0xb8, 0x19, 0xe9, 0x9a,
	0x79, 0x9a, 0x5c, 0x43, 0x68, 0x0e, 0x1d, 0xc7, 0xde, 0x27, 0xb2, 0x23, 0xc9, 0x5b, 0x98, 0xb8,
	0x87, 0xa5, 0x93, 0x53, 0xb5, 0x67, 0xad, 0xac, 0x4d, 0x6e, 0x38, 0x9d, 0xfe, 0x23, 0x3b, 0x96,
	0xbc, 0x81, 0xb9, 0x56, 0x45, 0xd6, 0xb5, 0xca, 0xd0, 0x99, 0x1b, 0x69, 0x86, 0xf8, 0x07, 0x42,
	0x2b, 0x95, 0xda, 0xf4, 0xd2, 0xbc, 0x97, 0x10, 0x3b, 0xe9, 0x1a, 0x26, 0x55, 0x93, 0x6f, 0x35,
	0x3d, 0x73, 0xa6, 0x93, 0xe7, 0xdb, 0xd1, 0x3c, 0x60, 0x3d, 0x67, 0xa3, 0xbc, 0xcf, 0x8b, 0xba,
	0x69, 0xb7, 0x14, 0xfa, 0x6b, 0x1e, 0x92, 0x65, 0xdf, 0x2c, 0x2f, 0x4b, 0x45, 0x23, 0x1b, 0x87,
	0xbb, 0xb9, 0x08, 0x5c, 0xcf, 0x2f, 0xc8, 0xda, 0x0a, 0xdb, 0xd3, 0x55, 0x9c, 0x9f, 0x54, 0x20,
	0xed, 0x2a, 0x6e, 0x20, 0xb4, 0x7f, 0x8b, 0xc6, 0x68, 0x1d, 0x6d, 0xa2, 0xd4, 0x02, 0x1f, 0x80,
	0x13, 0xc8, 0x0a, 0x42, 0x1b, 0x0c, 0x4d, 0x5c, 0x41, 0x92, 0x62, 0x10, 0x2f, 0x09, 0x33, 0xa7,
	0x91, 0xd7, 0x30, 0x7d, 0xfc, 0xdc, 0x4a, 0x7c, 0xf1, 0x57, 0x2e, 0x65, 0x8f, 0xc8, 0x07, 0x98,
	0xf9, 0x5c, 0xe9, 0xc2, 0xe5, 0x9c, 0xa4, 0x27, 0x1f, 0x84, 0x4d, 0x45, 0xf7, 0xdd, 0x1b, 0x88,
	0x4a, 0xe6, 0x7b, 0x4e, 0x2f, 0xb0, 0xee, 0x8c, 0x79, 0x44, 0x2e, 0x61, 0x22, 0x75, 0x86, 0x79,
	0x13, 0xa4, 0x63, 0x16, 0x4a, 0xfd, 0xad, 0x24, 0x6b, 0x5c, 0x7b, 0xf7, 0x60, 0x4a, 0x3b, 0xf6,
	0x25, 0xf2, 0xc9, 0xe6, 0xdc, 0x4e, 0x35, 0x70, 0xec, 0xa8, 0xde, 0x2d, 0x7e, 0x25, 0x9f, 0x5c,
	0x6c, 0xf6, 0xc7, 0x09, 0xb9, 0xd5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x71, 0x09, 0x15, 0x63,
	0x64, 0x03, 0x00, 0x00,
}
