// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fdinfo.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FdTypes int32

const (
	FdTypes_UND       FdTypes = 0
	FdTypes_REG       FdTypes = 1
	FdTypes_PIPE      FdTypes = 2
	FdTypes_FIFO      FdTypes = 3
	FdTypes_INETSK    FdTypes = 4
	FdTypes_UNIXSK    FdTypes = 5
	FdTypes_EVENTFD   FdTypes = 6
	FdTypes_EVENTPOLL FdTypes = 7
	FdTypes_INOTIFY   FdTypes = 8
	FdTypes_SIGNALFD  FdTypes = 9
	FdTypes_PACKETSK  FdTypes = 10
	FdTypes_TTY       FdTypes = 11
	FdTypes_FANOTIFY  FdTypes = 12
	FdTypes_NETLINKSK FdTypes = 13
	FdTypes_NS        FdTypes = 14
	FdTypes_TUNF      FdTypes = 15
	FdTypes_EXT       FdTypes = 16
	FdTypes_TIMERFD   FdTypes = 17
	FdTypes_MEMFD     FdTypes = 18
	// Any number above the real used. Not stored to image
	FdTypes_CTL_TTY     FdTypes = 65534
	FdTypes_AUTOFS_PIPE FdTypes = 65535
)

var FdTypes_name = map[int32]string{
	0:     "UND",
	1:     "REG",
	2:     "PIPE",
	3:     "FIFO",
	4:     "INETSK",
	5:     "UNIXSK",
	6:     "EVENTFD",
	7:     "EVENTPOLL",
	8:     "INOTIFY",
	9:     "SIGNALFD",
	10:    "PACKETSK",
	11:    "TTY",
	12:    "FANOTIFY",
	13:    "NETLINKSK",
	14:    "NS",
	15:    "TUNF",
	16:    "EXT",
	17:    "TIMERFD",
	18:    "MEMFD",
	65534: "CTL_TTY",
	65535: "AUTOFS_PIPE",
}

var FdTypes_value = map[string]int32{
	"UND":         0,
	"REG":         1,
	"PIPE":        2,
	"FIFO":        3,
	"INETSK":      4,
	"UNIXSK":      5,
	"EVENTFD":     6,
	"EVENTPOLL":   7,
	"INOTIFY":     8,
	"SIGNALFD":    9,
	"PACKETSK":    10,
	"TTY":         11,
	"FANOTIFY":    12,
	"NETLINKSK":   13,
	"NS":          14,
	"TUNF":        15,
	"EXT":         16,
	"TIMERFD":     17,
	"MEMFD":       18,
	"CTL_TTY":     65534,
	"AUTOFS_PIPE": 65535,
}

func (x FdTypes) Enum() *FdTypes {
	p := new(FdTypes)
	*p = x
	return p
}

func (x FdTypes) String() string {
	return proto.EnumName(FdTypes_name, int32(x))
}

func (x *FdTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FdTypes_value, data, "FdTypes")
	if err != nil {
		return err
	}
	*x = FdTypes(value)
	return nil
}

func (FdTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e06c9a45dfa4bf2, []int{0}
}

type FdinfoEntry struct {
	Id                   *uint32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Flags                *uint32  `protobuf:"varint,2,req,name=flags" json:"flags,omitempty"`
	Type                 *FdTypes `protobuf:"varint,3,req,name=type,enum=FdTypes" json:"type,omitempty"`
	Fd                   *uint32  `protobuf:"varint,4,req,name=fd" json:"fd,omitempty"`
	XattrSecuritySelinux *string  `protobuf:"bytes,5,opt,name=xattr_security_selinux,json=xattrSecuritySelinux" json:"xattr_security_selinux,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FdinfoEntry) Reset()         { *m = FdinfoEntry{} }
func (m *FdinfoEntry) String() string { return proto.CompactTextString(m) }
func (*FdinfoEntry) ProtoMessage()    {}
func (*FdinfoEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e06c9a45dfa4bf2, []int{0}
}

func (m *FdinfoEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FdinfoEntry.Unmarshal(m, b)
}
func (m *FdinfoEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FdinfoEntry.Marshal(b, m, deterministic)
}
func (m *FdinfoEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FdinfoEntry.Merge(m, src)
}
func (m *FdinfoEntry) XXX_Size() int {
	return xxx_messageInfo_FdinfoEntry.Size(m)
}
func (m *FdinfoEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FdinfoEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FdinfoEntry proto.InternalMessageInfo

func (m *FdinfoEntry) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FdinfoEntry) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *FdinfoEntry) GetType() FdTypes {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FdTypes_UND
}

func (m *FdinfoEntry) GetFd() uint32 {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return 0
}

func (m *FdinfoEntry) GetXattrSecuritySelinux() string {
	if m != nil && m.XattrSecuritySelinux != nil {
		return *m.XattrSecuritySelinux
	}
	return ""
}

type FileEntry struct {
	Type                 *FdTypes            `protobuf:"varint,1,req,name=type,enum=FdTypes" json:"type,omitempty"`
	Id                   *uint32             `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Reg                  *RegFileEntry       `protobuf:"bytes,3,opt,name=reg" json:"reg,omitempty"`
	Isk                  *InetSkEntry        `protobuf:"bytes,4,opt,name=isk" json:"isk,omitempty"`
	Nsf                  *NsFileEntry        `protobuf:"bytes,5,opt,name=nsf" json:"nsf,omitempty"`
	Psk                  *PacketSockEntry    `protobuf:"bytes,6,opt,name=psk" json:"psk,omitempty"`
	Nlsk                 *NetlinkSkEntry     `protobuf:"bytes,7,opt,name=nlsk" json:"nlsk,omitempty"`
	Efd                  *EventfdFileEntry   `protobuf:"bytes,8,opt,name=efd" json:"efd,omitempty"`
	Epfd                 *EventpollFileEntry `protobuf:"bytes,9,opt,name=epfd" json:"epfd,omitempty"`
	Sgfd                 *SignalfdEntry      `protobuf:"bytes,10,opt,name=sgfd" json:"sgfd,omitempty"`
	Tunf                 *TunfileEntry       `protobuf:"bytes,11,opt,name=tunf" json:"tunf,omitempty"`
	Tfd                  *TimerfdEntry       `protobuf:"bytes,12,opt,name=tfd" json:"tfd,omitempty"`
	Ify                  *InotifyFileEntry   `protobuf:"bytes,13,opt,name=ify" json:"ify,omitempty"`
	Ffy                  *FanotifyFileEntry  `protobuf:"bytes,14,opt,name=ffy" json:"ffy,omitempty"`
	Ext                  *ExtFileEntry       `protobuf:"bytes,15,opt,name=ext" json:"ext,omitempty"`
	Usk                  *UnixSkEntry        `protobuf:"bytes,16,opt,name=usk" json:"usk,omitempty"`
	Fifo                 *FifoEntry          `protobuf:"bytes,17,opt,name=fifo" json:"fifo,omitempty"`
	Pipe                 *PipeEntry          `protobuf:"bytes,18,opt,name=pipe" json:"pipe,omitempty"`
	Tty                  *TtyFileEntry       `protobuf:"bytes,19,opt,name=tty" json:"tty,omitempty"`
	Memfd                *MemfdFileEntry     `protobuf:"bytes,20,opt,name=memfd" json:"memfd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FileEntry) Reset()         { *m = FileEntry{} }
func (m *FileEntry) String() string { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()    {}
func (*FileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e06c9a45dfa4bf2, []int{1}
}

func (m *FileEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileEntry.Unmarshal(m, b)
}
func (m *FileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileEntry.Marshal(b, m, deterministic)
}
func (m *FileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEntry.Merge(m, src)
}
func (m *FileEntry) XXX_Size() int {
	return xxx_messageInfo_FileEntry.Size(m)
}
func (m *FileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FileEntry proto.InternalMessageInfo

func (m *FileEntry) GetType() FdTypes {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FdTypes_UND
}

func (m *FileEntry) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FileEntry) GetReg() *RegFileEntry {
	if m != nil {
		return m.Reg
	}
	return nil
}

func (m *FileEntry) GetIsk() *InetSkEntry {
	if m != nil {
		return m.Isk
	}
	return nil
}

func (m *FileEntry) GetNsf() *NsFileEntry {
	if m != nil {
		return m.Nsf
	}
	return nil
}

func (m *FileEntry) GetPsk() *PacketSockEntry {
	if m != nil {
		return m.Psk
	}
	return nil
}

func (m *FileEntry) GetNlsk() *NetlinkSkEntry {
	if m != nil {
		return m.Nlsk
	}
	return nil
}

func (m *FileEntry) GetEfd() *EventfdFileEntry {
	if m != nil {
		return m.Efd
	}
	return nil
}

func (m *FileEntry) GetEpfd() *EventpollFileEntry {
	if m != nil {
		return m.Epfd
	}
	return nil
}

func (m *FileEntry) GetSgfd() *SignalfdEntry {
	if m != nil {
		return m.Sgfd
	}
	return nil
}

func (m *FileEntry) GetTunf() *TunfileEntry {
	if m != nil {
		return m.Tunf
	}
	return nil
}

func (m *FileEntry) GetTfd() *TimerfdEntry {
	if m != nil {
		return m.Tfd
	}
	return nil
}

func (m *FileEntry) GetIfy() *InotifyFileEntry {
	if m != nil {
		return m.Ify
	}
	return nil
}

func (m *FileEntry) GetFfy() *FanotifyFileEntry {
	if m != nil {
		return m.Ffy
	}
	return nil
}

func (m *FileEntry) GetExt() *ExtFileEntry {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *FileEntry) GetUsk() *UnixSkEntry {
	if m != nil {
		return m.Usk
	}
	return nil
}

func (m *FileEntry) GetFifo() *FifoEntry {
	if m != nil {
		return m.Fifo
	}
	return nil
}

func (m *FileEntry) GetPipe() *PipeEntry {
	if m != nil {
		return m.Pipe
	}
	return nil
}

func (m *FileEntry) GetTty() *TtyFileEntry {
	if m != nil {
		return m.Tty
	}
	return nil
}

func (m *FileEntry) GetMemfd() *MemfdFileEntry {
	if m != nil {
		return m.Memfd
	}
	return nil
}

func init() {
	proto.RegisterEnum("FdTypes", FdTypes_name, FdTypes_value)
	proto.RegisterType((*FdinfoEntry)(nil), "fdinfo_entry")
	proto.RegisterType((*FileEntry)(nil), "file_entry")
}

func init() {
	proto.RegisterFile("fdinfo.proto", fileDescriptor_3e06c9a45dfa4bf2)
}

var fileDescriptor_3e06c9a45dfa4bf2 = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x94, 0xed, 0x6e, 0xda, 0x4a,
	0x10, 0x86, 0x0f, 0xd8, 0x7c, 0x0d, 0x60, 0x96, 0x0d, 0xe7, 0xc8, 0x3a, 0xd2, 0xd1, 0x49, 0xd3,
	0xaf, 0xb4, 0x52, 0x5c, 0x29, 0xea, 0x0d, 0xd0, 0xc4, 0x44, 0x56, 0x88, 0x41, 0x60, 0xaa, 0xa4,
	0x7f, 0x2c, 0x1a, 0x6c, 0x64, 0x41, 0x8c, 0x85, 0x4d, 0x05, 0x77, 0xd0, 0x5b, 0xe8, 0x4d, 0xf5,
	0x92, 0x9a, 0xce, 0x2c, 0xbb, 0x04, 0xaa, 0xf6, 0xdf, 0xbc, 0x3b, 0x8f, 0x67, 0xdf, 0x9d, 0x9d,
	0x35, 0xd4, 0xc2, 0x49, 0x14, 0x87, 0x0b, 0x2b, 0x59, 0x2e, 0xb2, 0xc5, 0xbf, 0xf5, 0x65, 0x30,
	0x0d, 0xa3, 0x79, 0xa0, 0x64, 0x3a, 0x3b, 0x8b, 0xe2, 0x20, 0x93, 0xb2, 0x1c, 0xa7, 0x32, 0x6a,
	0x26, 0xe3, 0xfb, 0x59, 0x90, 0x9d, 0xa5, 0x8b, 0xfb, 0x99, 0x5c, 0x62, 0xc8, 0x22, 0x3a, 0x8f,
	0x62, 0xb5, 0x52, 0x0f, 0xbe, 0x04, 0x71, 0x16, 0x4e, 0xa4, 0x6c, 0x08, 0x99, 0x2c, 0xe6, 0x73,
	0xb9, 0x60, 0xa4, 0xd1, 0x34, 0x1e, 0xcf, 0x77, 0x40, 0x25, 0x5b, 0xc5, 0xea, 0xd3, 0x2c, 0x7a,
	0x08, 0x96, 0xbb, 0x8c, 0x11, 0xa6, 0xf1, 0x22, 0x8b, 0xc2, 0x8d, 0xd2, 0xc1, 0x3a, 0x3b, 0xfb,
	0xc5, 0xe7, 0x2a, 0x8e, 0xd6, 0x52, 0x42, 0x18, 0xed, 0x4e, 0x04, 0x49, 0x94, 0x04, 0xbb, 0x0d,
	0x32, 0x55, 0xa1, 0xfa, 0x10, 0x3c, 0xa8, 0xf2, 0x27, 0xdf, 0x72, 0xaa, 0x0d, 0x3e, 0x3a, 0x5c,
	0x6e, 0xb8, 0x01, 0xf9, 0x68, 0x62, 0xe6, 0x8e, 0xf3, 0xa7, 0xf5, 0x01, 0x46, 0xbc, 0x05, 0x85,
	0x70, 0x3e, 0x9e, 0xa6, 0x66, 0x5e, 0x2c, 0x6d, 0x05, 0xff, 0x0f, 0xf4, 0x6c, 0x93, 0x04, 0xa6,
	0x86, 0x8b, 0xc6, 0x79, 0xc5, 0x0a, 0x27, 0x3e, 0xe9, 0x74, 0x20, 0x96, 0xa9, 0x48, 0x38, 0x31,
	0xf5, 0x6d, 0x91, 0x70, 0xc2, 0xdf, 0xc3, 0x3f, 0xeb, 0x71, 0x96, 0x2d, 0xfd, 0x34, 0xb8, 0x5f,
	0x2d, 0xa3, 0x6c, 0x83, 0x01, 0x76, 0x6b, 0xb5, 0x36, 0x0b, 0xc7, 0xb9, 0xd3, 0xca, 0xa0, 0x25,
	0xb2, 0x43, 0x99, 0x1c, 0x6e, 0x73, 0x27, 0xdf, 0x0b, 0x00, 0x74, 0x52, 0xe9, 0x4c, 0xed, 0x99,
	0xfb, 0xe3, 0x9e, 0x68, 0x3c, 0xbf, 0x33, 0xfe, 0x0c, 0x34, 0xbc, 0x51, 0x74, 0x98, 0x3b, 0xad,
	0x9e, 0x37, 0x2c, 0x8c, 0xfd, 0xa7, 0x62, 0x03, 0xca, 0xf1, 0x63, 0xd0, 0xa2, 0x74, 0x86, 0x3e,
	0x09, 0x31, 0x2c, 0xba, 0x6e, 0x3f, 0x9d, 0x29, 0x02, 0x53, 0x44, 0xc4, 0x69, 0x28, 0x5c, 0x12,
	0x11, 0xa7, 0x07, 0x35, 0x30, 0xc5, 0x5f, 0x80, 0x96, 0x60, 0x8d, 0xa2, 0x20, 0xb8, 0xb5, 0x1d,
	0x0e, 0x9f, 0x86, 0x43, 0x51, 0x98, 0xe6, 0x2f, 0x41, 0x8f, 0xe7, 0x88, 0x95, 0x04, 0xd6, 0xb4,
	0xe4, 0xb4, 0x3c, 0xed, 0x26, 0xd2, 0x88, 0x69, 0x01, 0x36, 0xae, 0x2c, 0xa8, 0x23, 0x4b, 0x0e,
	0xd1, 0xc1, 0x9e, 0x98, 0xe7, 0x6f, 0x40, 0x0f, 0x12, 0xe4, 0x2a, 0x82, 0xfb, 0xdb, 0xda, 0x4d,
	0xd7, 0x3e, 0x29, 0x10, 0xfe, 0x1c, 0xf4, 0x74, 0x8a, 0x28, 0xc8, 0x36, 0xa8, 0xb9, 0x53, 0x10,
	0x25, 0xf9, 0x09, 0x76, 0x76, 0x15, 0x87, 0x66, 0x55, 0x1e, 0x93, 0xc4, 0x5e, 0x21, 0x92, 0xd4,
	0x09, 0xb4, 0x62, 0xd6, 0x14, 0xb2, 0x1d, 0x52, 0xe5, 0x0a, 0x53, 0x64, 0x1e, 0xc7, 0xd4, 0xac,
	0x4b, 0xf3, 0xd1, 0x76, 0x6c, 0x0f, 0xcc, 0xa3, 0xe6, 0xaf, 0x40, 0x0b, 0x11, 0x33, 0x04, 0xd6,
	0xb2, 0xc2, 0xf1, 0x6f, 0x38, 0x04, 0xe8, 0xfe, 0x70, 0xd4, 0xcd, 0x86, 0x34, 0x8e, 0xf1, 0x61,
	0x1f, 0xd6, 0x19, 0x79, 0x5a, 0x61, 0x53, 0x99, 0xf4, 0x44, 0xcf, 0x60, 0xef, 0xfe, 0x30, 0xc5,
	0xff, 0x07, 0x9d, 0x1e, 0x84, 0xd9, 0x14, 0x48, 0xd5, 0x22, 0xa1, 0x8e, 0x45, 0x31, 0x01, 0xf4,
	0x4a, 0x4c, 0x2e, 0x01, 0x12, 0x0a, 0xa0, 0x98, 0x6c, 0xe0, 0xd3, 0x31, 0x8f, 0xa4, 0x0d, 0x8c,
	0x0f, 0x6c, 0xa0, 0xe6, 0xaf, 0xa1, 0x20, 0x9e, 0x94, 0xd9, 0x92, 0xb7, 0x2b, 0xd4, 0x3e, 0xb6,
	0xcd, 0xbf, 0xfd, 0x9a, 0x87, 0xb2, 0x9a, 0x5a, 0x5e, 0x02, 0x6d, 0xe4, 0x5e, 0xb2, 0xbf, 0x28,
	0x18, 0xd8, 0x57, 0x2c, 0xc7, 0xcb, 0xa0, 0xf7, 0x9d, 0xbe, 0xcd, 0xf2, 0x14, 0x75, 0x9c, 0x4e,
	0x8f, 0x69, 0x1c, 0xa0, 0xe8, 0xb8, 0xb6, 0x37, 0xbc, 0x66, 0x3a, 0xc5, 0x23, 0xd7, 0xb9, 0xc5,
	0xb8, 0xc0, 0xab, 0x50, 0xb2, 0x3f, 0xda, 0xae, 0xd7, 0xb9, 0x64, 0x45, 0x5e, 0x87, 0x8a, 0x10,
	0xfd, 0x5e, 0xb7, 0xcb, 0x4a, 0x94, 0x73, 0xdc, 0x9e, 0xe7, 0x74, 0xee, 0x58, 0x99, 0xd7, 0xa0,
	0x3c, 0x74, 0xae, 0xdc, 0x76, 0x17, 0xc9, 0x0a, 0xa9, 0x7e, 0xfb, 0xe2, 0x5a, 0x14, 0x04, 0xda,
	0xd9, 0xf3, 0xee, 0x58, 0x95, 0x96, 0x3b, 0x6d, 0xf9, 0x49, 0x8d, 0xca, 0xe1, 0x96, 0x5d, 0xc7,
	0xbd, 0x46, 0xaa, 0xce, 0x8b, 0x90, 0x77, 0x87, 0xcc, 0x20, 0x53, 0xde, 0xc8, 0xed, 0xb0, 0x06,
	0x7d, 0x67, 0xdf, 0x7a, 0x8c, 0xd1, 0x4e, 0x9e, 0x73, 0x63, 0x0f, 0xb0, 0x76, 0x93, 0x57, 0xa0,
	0x70, 0x63, 0xdf, 0x60, 0xc8, 0xb1, 0x42, 0xe9, 0xc2, 0xeb, 0xfa, 0x54, 0xfc, 0xc7, 0xa3, 0xc6,
	0x9b, 0x50, 0x6d, 0x8f, 0xbc, 0x5e, 0x67, 0xe8, 0x8b, 0xf3, 0x3d, 0x3e, 0x6a, 0x1f, 0xd8, 0x27,
	0xe3, 0x9d, 0xf8, 0x03, 0x7d, 0x8e, 0x62, 0xfc, 0xfd, 0x4c, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x38, 0x55, 0x0f, 0x4d, 0x8e, 0x05, 0x00, 0x00,
}
