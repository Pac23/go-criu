// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp-stream.proto

package protobindings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpStreamEntry struct {
	InqLen               *uint32  `protobuf:"varint,1,req,name=inq_len,json=inqLen" json:"inq_len,omitempty"`
	InqSeq               *uint32  `protobuf:"varint,2,req,name=inq_seq,json=inqSeq" json:"inq_seq,omitempty"`
	OutqLen              *uint32  `protobuf:"varint,3,req,name=outq_len,json=outqLen" json:"outq_len,omitempty"`
	OutqSeq              *uint32  `protobuf:"varint,4,req,name=outq_seq,json=outqSeq" json:"outq_seq,omitempty"`
	OptMask              *uint32  `protobuf:"varint,5,req,name=opt_mask,json=optMask" json:"opt_mask,omitempty"`
	SndWscale            *uint32  `protobuf:"varint,6,req,name=snd_wscale,json=sndWscale" json:"snd_wscale,omitempty"`
	MssClamp             *uint32  `protobuf:"varint,7,req,name=mss_clamp,json=mssClamp" json:"mss_clamp,omitempty"`
	RcvWscale            *uint32  `protobuf:"varint,8,opt,name=rcv_wscale,json=rcvWscale" json:"rcv_wscale,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	Cork                 *bool    `protobuf:"varint,10,opt,name=cork" json:"cork,omitempty"`
	Nodelay              *bool    `protobuf:"varint,11,opt,name=nodelay" json:"nodelay,omitempty"`
	UnsqLen              *uint32  `protobuf:"varint,12,opt,name=unsq_len,json=unsqLen" json:"unsq_len,omitempty"`
	SndWl1               *uint32  `protobuf:"varint,13,opt,name=snd_wl1,json=sndWl1" json:"snd_wl1,omitempty"`
	SndWnd               *uint32  `protobuf:"varint,14,opt,name=snd_wnd,json=sndWnd" json:"snd_wnd,omitempty"`
	MaxWindow            *uint32  `protobuf:"varint,15,opt,name=max_window,json=maxWindow" json:"max_window,omitempty"`
	RcvWnd               *uint32  `protobuf:"varint,16,opt,name=rcv_wnd,json=rcvWnd" json:"rcv_wnd,omitempty"`
	RcvWup               *uint32  `protobuf:"varint,17,opt,name=rcv_wup,json=rcvWup" json:"rcv_wup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpStreamEntry) Reset()         { *m = TcpStreamEntry{} }
func (m *TcpStreamEntry) String() string { return proto.CompactTextString(m) }
func (*TcpStreamEntry) ProtoMessage()    {}
func (*TcpStreamEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67a8d0e8326fc7a, []int{0}
}

func (m *TcpStreamEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpStreamEntry.Unmarshal(m, b)
}
func (m *TcpStreamEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpStreamEntry.Marshal(b, m, deterministic)
}
func (m *TcpStreamEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpStreamEntry.Merge(m, src)
}
func (m *TcpStreamEntry) XXX_Size() int {
	return xxx_messageInfo_TcpStreamEntry.Size(m)
}
func (m *TcpStreamEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpStreamEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TcpStreamEntry proto.InternalMessageInfo

func (m *TcpStreamEntry) GetInqLen() uint32 {
	if m != nil && m.InqLen != nil {
		return *m.InqLen
	}
	return 0
}

func (m *TcpStreamEntry) GetInqSeq() uint32 {
	if m != nil && m.InqSeq != nil {
		return *m.InqSeq
	}
	return 0
}

func (m *TcpStreamEntry) GetOutqLen() uint32 {
	if m != nil && m.OutqLen != nil {
		return *m.OutqLen
	}
	return 0
}

func (m *TcpStreamEntry) GetOutqSeq() uint32 {
	if m != nil && m.OutqSeq != nil {
		return *m.OutqSeq
	}
	return 0
}

func (m *TcpStreamEntry) GetOptMask() uint32 {
	if m != nil && m.OptMask != nil {
		return *m.OptMask
	}
	return 0
}

func (m *TcpStreamEntry) GetSndWscale() uint32 {
	if m != nil && m.SndWscale != nil {
		return *m.SndWscale
	}
	return 0
}

func (m *TcpStreamEntry) GetMssClamp() uint32 {
	if m != nil && m.MssClamp != nil {
		return *m.MssClamp
	}
	return 0
}

func (m *TcpStreamEntry) GetRcvWscale() uint32 {
	if m != nil && m.RcvWscale != nil {
		return *m.RcvWscale
	}
	return 0
}

func (m *TcpStreamEntry) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *TcpStreamEntry) GetCork() bool {
	if m != nil && m.Cork != nil {
		return *m.Cork
	}
	return false
}

func (m *TcpStreamEntry) GetNodelay() bool {
	if m != nil && m.Nodelay != nil {
		return *m.Nodelay
	}
	return false
}

func (m *TcpStreamEntry) GetUnsqLen() uint32 {
	if m != nil && m.UnsqLen != nil {
		return *m.UnsqLen
	}
	return 0
}

func (m *TcpStreamEntry) GetSndWl1() uint32 {
	if m != nil && m.SndWl1 != nil {
		return *m.SndWl1
	}
	return 0
}

func (m *TcpStreamEntry) GetSndWnd() uint32 {
	if m != nil && m.SndWnd != nil {
		return *m.SndWnd
	}
	return 0
}

func (m *TcpStreamEntry) GetMaxWindow() uint32 {
	if m != nil && m.MaxWindow != nil {
		return *m.MaxWindow
	}
	return 0
}

func (m *TcpStreamEntry) GetRcvWnd() uint32 {
	if m != nil && m.RcvWnd != nil {
		return *m.RcvWnd
	}
	return 0
}

func (m *TcpStreamEntry) GetRcvWup() uint32 {
	if m != nil && m.RcvWup != nil {
		return *m.RcvWup
	}
	return 0
}

func init() {
	proto.RegisterType((*TcpStreamEntry)(nil), "tcp_stream_entry")
}

func init() {
	proto.RegisterFile("tcp-stream.proto", fileDescriptor_f67a8d0e8326fc7a)
}

var fileDescriptor_f67a8d0e8326fc7a = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x91, 0x4b, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xd5, 0x67, 0x12, 0x43, 0x4b, 0xf1, 0x06, 0xf3, 0x92, 0x2a, 0x56, 0x6c, 0x00, 0xf5,
	0x04, 0x48, 0x65, 0x0b, 0x9b, 0xb2, 0xa8, 0xc4, 0xc6, 0x0a, 0x89, 0x85, 0xa2, 0x26, 0xb6, 0x1b,
	0x3b, 0x94, 0x5e, 0x93, 0x1b, 0x70, 0x13, 0x66, 0xc6, 0x4d, 0xb3, 0xf3, 0xfc, 0x9f, 0x3f, 0x6b,
	0xfe, 0x84, 0xcd, 0x7c, 0x66, 0x1f, 0x9c, 0xaf, 0x55, 0x5a, 0x3d, 0xda, 0xda, 0x78, 0x73, 0xc5,
	0x8c, 0xf5, 0x2e, 0x9c, 0xef, 0xfe, 0x06, 0x74, 0x41, 0x86, 0x0b, 0x52, 0x69, 0x5f, 0xef, 0xf9,
	0x05, 0x8b, 0x0a, 0xbd, 0x95, 0xa5, 0xd2, 0xa2, 0x37, 0xef, 0xdf, 0x4f, 0x56, 0x63, 0x18, 0x5f,
	0x95, 0x6e, 0x81, 0x53, 0x5b, 0xd1, 0x3f, 0x82, 0x77, 0xb5, 0xe5, 0x97, 0x2c, 0x36, 0x8d, 0x0f,
	0xca, 0x80, 0x48, 0x84, 0x33, 0x3a, 0x2d, 0x42, 0x69, 0xd8, 0x21, 0xb4, 0xe6, 0x80, 0xac, 0x97,
	0x55, 0xea, 0x36, 0x62, 0x84, 0x68, 0x39, 0xfa, 0x7d, 0xee, 0xc7, 0x3d, 0xb8, 0x61, 0xfd, 0x1b,
	0xa4, 0xfc, 0x96, 0x31, 0xa7, 0x73, 0xb9, 0x73, 0x59, 0x5a, 0x2a, 0x31, 0x26, 0x3d, 0x81, 0x64,
	0x4d, 0x01, 0xbf, 0x66, 0x49, 0xe5, 0x9c, 0xcc, 0xca, 0xb4, 0xb2, 0x22, 0x22, 0x1a, 0x43, 0xf0,
	0x82, 0x33, 0xba, 0x75, 0xf6, 0xdd, 0xba, 0xf1, 0xbc, 0x87, 0x2e, 0x24, 0x07, 0xf7, 0x86, 0x25,
	0xbe, 0xa8, 0x94, 0xf3, 0xe8, 0x26, 0x81, 0x1e, 0x03, 0xce, 0xd9, 0x30, 0x33, 0xf5, 0x46, 0x30,
	0x00, 0xf1, 0x8a, 0xce, 0x5c, 0xb0, 0x48, 0x9b, 0x5c, 0x95, 0xe9, 0x5e, 0x9c, 0x50, 0xdc, 0x8e,
	0xd8, 0xb1, 0xd1, 0x2e, 0xd4, 0x3f, 0xa5, 0xa7, 0x22, 0x9c, 0x0f, 0x9f, 0x8c, 0x1a, 0x94, 0x0b,
	0x31, 0x21, 0x32, 0xc6, 0xf5, 0xcb, 0xc5, 0x11, 0xe8, 0x5c, 0x4c, 0x3b, 0xa0, 0x73, 0xdc, 0xbb,
	0x4a, 0x7f, 0xe4, 0xae, 0xd0, 0xb9, 0xd9, 0x89, 0xb3, 0xb0, 0x19, 0x24, 0x6b, 0x0a, 0xd0, 0xa3,
	0x5a, 0xe0, 0xcd, 0x82, 0x87, 0x9d, 0xc0, 0x6b, 0x41, 0x63, 0xc5, 0x79, 0x07, 0x1a, 0xbb, 0x9c,
	0x7d, 0x4c, 0x9f, 0xe8, 0x6f, 0x7f, 0xc2, 0x0b, 0x85, 0xfe, 0x72, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0x88, 0xb4, 0xd3, 0x14, 0x02, 0x00, 0x00,
}
